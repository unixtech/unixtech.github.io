{"pages":[{"text":"Category: Unix A Blog about all the things Software - Mainly Unix and friends. I am Python programmer and Artist who uses open source tools for earning bread, So expect stuff on that too. We are the main reasons about all this. We can't no longer ignore all this. Messenger is not the issue, Message is the one. We have tp really endure all this in order to make sure we don't become political parayah. We are doing this to ensure support for our cause. Gender commitement We are commited to provide gender equality in this space without discriminating against anyone.","tags":"pages","title":"About","url":"https://unixtech.github.io/pages/About.html"},{"text":"This is my Contact me page Contact 2 1","tags":"pages","title":"Contact me","url":"https://unixtech.github.io/pages/contact-me.html"},{"text":"# Reveal.js presentation This is my first presentation using reveal.js THE END This too is part of it. $$x&#94;2$$ - Try the online editor - Source code & documentation We are timed out THE tart This too is part of it. $$x&#94;2$$ - Try the online editor - Source code & documentation We are timed out This is another one of those MDs Markdowns still, We are not sure of what to be done regarding this. MarkII We are trying to make sure all are safe via $$e=mc&#94;2$$ Either write in MD or HTML not both. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'blue ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('SansSerif' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_SansSerif');\" + \"VARIANT['bold'].fonts.unshift('MathJax_SansSerif-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_SansSerif-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_SansSerif-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_SansSerif');\" + \"VARIANT['bold'].fonts.unshift('MathJax_SansSerif-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_SansSerif-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_SansSerif-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"presentation","title":"presentation titsle","url":"https://unixtech.github.io/presentation/presen1.html"},{"text":"FreeBSD and OpenBSD PF (Packet filter) is default firewall for OpenBSD and included in other OS's like FreeBSD and Apple IOS operating systems. Many other \"Commercial firewall\" appliances are inspired by PF. History of PF PF was originally designed as replacement for Darren Reed's IPFilter, from which it derives much of its rule syntax. IPFilter was removed from OpenBSD's CVS tree due to OpenBSD developers' problems with its license. Specifically, Reed distributed some versions of his software with the license clause, \"Derivative or modified works are not permitted without the author's prior consent.\" Due to this, the OpenBSD team decided to replace the software. This decision became the subject of wrangling among the parties involved, degenerating into a discussion that failed to reach mutual understanding. On the subject, OpenBSD project leader Theo de Raadt wrote, \"Software which OpenBSD uses and redistributes must be free to all... for any purpose including... modification.\" PF has since evolved quickly and now has several advantages over other available firewalls. Network Address Translation (NAT) and Quality of Service (QoS) have been integrated into PF, QoS by importing the ALTQ queuing software and linking it with PF's configuration. Features such as pfsync and CARP for failover and redundancy, authpf for session authentication, and ftp-proxy to ease firewalling the difficult FTP protocol, have also extended PF. One of the many innovative feature is PF's logging. Logging is configurable per rule within the pf.conf and logs are provided from PF by a pseudo-network interface called pflog. Logs may be monitored using standard utilities such as tcpdump, which in OpenBSD has been extended especially for the purpose, or saved to disk in a modified tcpdump/pcap binary format using the pflogd daemon. For more info, Read - History of pf PF setup Usually PF is deployed in conjuction with other tools provided by OpenBSD ecosystem. These includes: HFSC Queuing system for QoS FTP-Proxy Application proxies such as Relayd ( Mainly used as HTTPs termination point ) OS detection using fingerprint - pf.os * CARP firewall failover for HA environments ( UCARP for FreeBSD users ) How to deploy PF firewall in your environment Note: Both OpenBSD and FreeBSD OS uses different syntax for maintaining PF firewall. We will mainly focus on OpenBSD OS but there are benefits of using PF with FreeBSD OS since it provides multi-processing capable version of PF . File - /etc/rc.conf.local pf = YES pf_rules = /etc/pf.conf pflogd_flags = \"-s 1500\" # Ex. Snaplen, Log filename File - /etc/pf.conf ### My master pf.conf ### Interfaces EXTIF = \"em0\" INTIF = \"em1\" DMZ = \"em2\" EXTRAIF = \"em3\" ### Hosts ADMIN = \"10.0.11.1\" ADMIN1 = \"10.0.11.31\" BOTHADMIN = \"{\" $AD MIN $AD MIN1 \"}\" EXTDNSSERVER = \"4.2.2.2\" INTDNSSERVER = \" $ INTIF:0\" #DNSSERVERS =\"{' $INTDNSSERVER $EXTDNSSERVER '}\" DNSSERVER = \"{ $ INTDNSSERVER}\" LOGSERVER = \"{ 10.0.11.22, 10.0.11.31 }\" All these variable defined are called MACROS inside pf.conf file. These are used for convinience and ease of use Defining nested macros are possible as well. Take a look at INTIF macro, If you want to include that whole internal network in your rules then INTIF:network in your rule. Now, We will have a look at some of the rules itself. #External Interface #Block all on External interface block log on $E XTIF ## Network address translation with outgoing source #match out log on $EXTIF from $INTIF to any received-on $INTIF tag EGRESS nat-to ($EXTIF:0) match out log on $E XTIF from $INTIF:network to any received-on $INTIF tag EGRESS nat-to ( $E XTIF:0 ) #If you have difficulties with any box with static port forwarding then you should use #match out log on $EXTIF from $INTIF to any received-on $INTIF tag EGRESS nat-to ($EXTIF:0) static-port #Traffic generated from firewall it self will be tagged as EGRESS match out log on $E XTIF from $E XTIF to any tag EGRESS #More on these later on. #EXTIF inbound pass in log ( to pflog1 ) on $E XTIF inet proto tcp from any to any port 22 pass in on $E XTIF inet proto tcp from any to $E XTIF port >10000 #External interface outbound pass out log on $E XTIF inet from ( $E XTIF ) to any $TCPSTATE $E XTIFSTO queue ( bulk, ack ) tagged EGRESS #pass out log on $EXTIF inet proto udp from ($EXTIF) to any $UDPSTATE $EXTIFSTO queue (bulk, ack) tagged EGRESS pass out log on $E XTIF inet proto tcp from ( $E XTIF ) to any port $TCPPORTS $TCPSTATE $E XTIFSTO queue ( web, ack ) tagged EGRESS pass out log on $E XTIF inet proto udp from ( $E XTIF ) to any port 53 $UDPSTATE $E XTIFSTO queue ( dns, ack ) tagged EGRESS These are some of the rules that I have defined in my DMZ firewall to prevent other users from coming in from outside. After deploying this ruleset only SSH is allowed from outside interface of firewall. From inside essential end-user services such as Internet browsing, DNS are enabled. Take a look at match out rules on EXTIF to have a look at how nat rules are working. Turning on routing To turn on routing functionality of the box, You need to make sure you have enabled ip forwarding in sysctl # To check the ip forwarding status sysctl net.inet.ip.forwarding # If it's 0 then turn it on sysctl net.inet.ip.forwarding = 1 #To make it permanent ### /etc/sysctl.conf net.inet.ip.forwarding = 1 PFCTL utility After making changes inside pf.conf file, rules are not automatically loaded. To load the rules We need to use pfctl To load rules - Assuming rule file is /etc/pf.conf pfctl -vf /etc/pf.conf To see which rules are currently loaded, It will also show related counters. pfctl -vsr Conclusions PF is one of the most popular and powerful firewall for managing your network traffic. We have barely even scratched surface of what PF can provide. It's functionality is much more then many of the commercial offerings offers. We will also cover some extended functionality such as usage of Anchors, Preventing torrent traffic, Blacklisting and preventing brute-forcing attack etc. Being open-source it places no restrictions on usage. Users can use it any which way they would prefer. Having used PF and OpenBSD for nearly 10 years in all of my setups I can say PF is most secure firewall there is and With combination of OpenBSD and PF you can be pretty sure you are one step ahead then rest in process of being NSA proof. var CommentBox = React.createClass({ render: function() { return ( <div className=\"commentBox\"> Hello, world! I am a CommentBox. </div> ); } }); ReactDOM.render( <CommentBox />, document.getElementById('comment') );","tags":"Unix","title":"PF Firewall-1","url":"https://unixtech.github.io/12-2014/pf-firewall-1.html"},{"text":"FDF This is the content of my super blog post.1 We will be witnessing such thing is unimaginable to me. Title 2 $$x&#94;2$$ mulcha \\(x&#94;2\\) - This is inline math \\(e=mc&#94;2\\) - This is perfect. :D In normal series In-line math is working but in reveals you can't use In line math if you are doing some sort of Markdown presentations. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'blue ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('SansSerif' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_SansSerif');\" + \"VARIANT['bold'].fonts.unshift('MathJax_SansSerif-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_SansSerif-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_SansSerif-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_SansSerif');\" + \"VARIANT['bold'].fonts.unshift('MathJax_SansSerif-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_SansSerif-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_SansSerif-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Super1","title":"super titsle","url":"https://unixtech.github.io/12-2010/mys-super-p2ost.html"}]}